#include<iostream>
#include<cstring>
#include"dma.h"

using namespace std;

baseDMA::baseDMA(const char *l, int r)
{
	lable = new char[strlen(l) + 1];
	strcpy(lable, l);
	rating = r;
}

baseDMA::baseDMA(const baseDMA & rs)
{
	lable = new char[strlen(rs.lable) + 1];
	strcpy(lable, rs.lable);
	rating = rs.rating;
}

baseDMA & baseDMA::operator=(const baseDMA &rs)
{
	if (this == &rs)
		return *this;
	delete[] lable;
	lable = new char[strlen(rs.lable) + 1];
	strcpy(lable, rs.lable);
	rating = rs.rating;
	return *this;
}

std::ostream & operator<<(std::ostream &os,
	const baseDMA & rs)
{
	os << "Lable: " << rs.lable << endl;
	os << "Rating: " << rs.rating << endl;
	return os;
}

lacksDMA::lacksDMA(const char * c, const char *l,
	int r) :baseDMA(l, r)
{
	strcpy(color, c);
	color[39] = '\0';
}

lacksDMA::lacksDMA(const char *c, const baseDMA &rs) :baseDMA(rs)
{
	strcpy(color, c);
	color[39] = '\0';
}

std::ostream & operator<<(std::ostream &os,
	const lacksDMA &rs)
{
	os << (const baseDMA &)rs;
	os << "Color: " << rs.color << endl;
	return os;
}

hasDMA::hasDMA(const char *s, const char *l, int r) :baseDMA(l, r)
{
	style = new char[strlen(s) + 1];
	strcpy(style, s);
}

hasDMA::hasDMA(const char*s, const baseDMA &rs) :baseDMA(rs)
{
	style = new char[strlen(s) + 1];
	strcpy(style, s);
}

hasDMA::hasDMA(const hasDMA & hs) :baseDMA(hs)
{
	style = new char[strlen(hs.style) + 1];
	strcpy(style, hs.style);
}

hasDMA & hasDMA::operator=(const hasDMA & rs)
{
	if(this == &rs)
		return *this;
	baseDMA::operator=(rs);
	delete[] style;
	style = new char[strlen(rs.style) + 1];
	strcpy(style, rs.style);
	return *this;
}

std::ostream & operator<<(std::ostream &os,
	const hasDMA & hs)
{
	os << (const baseDMA &)hs;
	os << "Style: " << hs.style << endl;
	return os;
}
